# Generated by Django 5.1.6 on 2025-03-05 04:59

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0004_alter_studies_brief_summary_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdverseEventTerm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term', models.CharField(help_text='Adverse event term', max_length=255, unique=True)),
                ('description', models.TextField(blank=True, help_text='Description of the term', null=True)),
                ('category', models.CharField(blank=True, help_text='Category of adverse event', max_length=100, null=True)),
                ('is_common', models.BooleanField(default=False, help_text='Whether this is a commonly used term')),
            ],
            options={
                'db_table': 'pv_adverse_event_terms',
                'ordering': ['term'],
            },
        ),
        migrations.CreateModel(
            name='PubMedArticle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pubmed_id', models.CharField(help_text='PubMed ID (PMID)', max_length=20, unique=True)),
                ('title', models.TextField(help_text='Article title')),
                ('authors', models.TextField(blank=True, help_text='JSON list of authors', null=True)),
                ('abstract', models.TextField(blank=True, help_text='Article abstract', null=True)),
                ('publication_date', models.DateField(help_text='Publication date')),
                ('journal', models.CharField(help_text='Journal name', max_length=255)),
                ('doi', models.CharField(blank=True, help_text='Digital Object Identifier', max_length=100, null=True)),
                ('url', models.URLField(help_text='URL to the PubMed article')),
                ('keywords', models.TextField(blank=True, help_text='Keywords from the article', null=True)),
                ('mesh_terms', models.TextField(blank=True, help_text='MeSH terms', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'pv_pubmed_articles',
            },
        ),
        migrations.CreateModel(
            name='SearchRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the search rule', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Description of the search purpose', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this rule is currently active')),
                ('last_run', models.DateTimeField(blank=True, help_text='When this rule was last executed', null=True)),
                ('frequency', models.CharField(choices=[('daily', 'Daily'), ('8_hours', 'Every 8 Hours'), ('12_hours', 'Every 12 Hours'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], default='daily', help_text='How often to run this search', max_length=20)),
                ('email_notifications', models.BooleanField(default=True, help_text='Send email notifications for new results')),
                ('notification_emails', models.TextField(blank=True, help_text='Comma-separated list of email addresses to notify', null=True)),
            ],
            options={
                'db_table': 'pv_search_rules',
            },
        ),
        migrations.AlterField(
            model_name='studies',
            name='eligibility_criteria',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.CreateModel(
            name='SearchCriterion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_type', models.CharField(choices=[('keyword', 'Keyword'), ('author', 'Author'), ('exact_phrase', 'Exact Phrase'), ('drug_name', 'Drug Name'), ('company_name', 'Company Name'), ('generic_name', 'Generic Name'), ('inn_name', 'INN Name'), ('adverse_event', 'Adverse Event Term')], max_length=20)),
                ('value', models.CharField(help_text='Search term value', max_length=255)),
                ('operator', models.CharField(choices=[('AND', 'AND'), ('OR', 'OR')], default='AND', help_text='Logical operator to connect with other criteria', max_length=5)),
                ('group', models.IntegerField(default=0, help_text='Group number for complex logical grouping')),
                ('order', models.IntegerField(default=0, help_text='Order within the search rule')),
                ('search_rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='criteria', to='core.searchrule')),
            ],
            options={
                'db_table': 'pv_search_criteria',
                'ordering': ['group', 'order'],
            },
        ),
        migrations.CreateModel(
            name='SearchResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('found_at', models.DateTimeField(auto_now_add=True, help_text='When this article was found by the search')),
                ('relevance_score', models.FloatField(default=0.0, help_text='Calculated relevance score')),
                ('is_reviewed', models.BooleanField(default=False, help_text='Whether this result has been reviewed')),
                ('notes', models.TextField(blank=True, help_text='Notes about this result', null=True)),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='search_results', to='core.pubmedarticle')),
                ('search_rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='core.searchrule')),
            ],
            options={
                'db_table': 'pv_search_results',
                'unique_together': {('search_rule', 'article')},
            },
        ),
    ]
